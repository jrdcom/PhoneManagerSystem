/*
 * Generated by StarUML(tm) Java Add-In
 *
 * @ Project : phone manager system
 * @ File Name : NetworkManager.java
 * @ Date : 2015/10/13
 * @ Author : 
 *
 */

package com.app2.pms.debug.net;

import java.io.IOException;

import android.content.Context;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;

import com.app2.pms.common.Configuration;
import com.app2.pms.common.IPv4v6Utils;
import com.app2.pms.common.LogExt;
import com.app2.pms.debug.app.DebugService.NetTransportListener;
import com.app2.pms.debug.net.Network.ChatMessage;
import com.app2.pms.debug.net.Network.RegisterName;
import com.app2.pms.debug.net.Network.UpdateNames;
import com.esotericsoftware.kryonet.Client;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;

public class NetworkManager {
    private static final String TAG = "NetworkManager";

    private String mLocalIp;
    private String mUUID;

    private Handler mMainHandler = null;
    // private Context mContext = null;
    private RemoteClientHandler mRemoteClientHandler = null;
    private Looper mRemoteClientLooper = null;
    private Client mRemoteClient = null;
    private NetTransportListener mNetTransportListener = null;

    public NetworkManager(Handler mainHandler, Context context, String ip) {
        mMainHandler = mainHandler;

        mLocalIp = ip;
        mUUID = IPv4v6Utils.getUUID(context);
    }

    public Client getRemoteClient() {
        return mRemoteClient;
    }

    public void setNetTransportListener(NetTransportListener l) {
        mNetTransportListener = l;
    }

    public void start(String ip, int port) {
        HandlerThread thread = new HandlerThread("RemoteClient");
        thread.start();

        mRemoteClientLooper = thread.getLooper();
        mRemoteClientHandler = new RemoteClientHandler(mRemoteClientLooper);
        connectRemoteServer(ip, port);
    }

    private void connectRemoteServer(String ip, int port) {
        mRemoteClientHandler.sendMessage(mRemoteClientHandler.obtainMessage(Configuration.MSG_CONNECT_REMOTE_SERVER, 0, port, ip));
    }

    private final class RemoteClientHandler extends Handler {
        public RemoteClientHandler(Looper looper) {
            super(looper);
        }

        @Override
        public void handleMessage(Message msg) {
            LogExt.d(TAG, "ClientHandler handleMessage msg " + msg);
            switch (msg.what) {
                case Configuration.MSG_CONNECT_REMOTE_SERVER:
                    mRemoteClient = new Client();
                    mRemoteClient.start();
                    Network.register(mRemoteClient);
                    mRemoteClient.addListener(mRemoteClientListener);
                    try {
                        mRemoteClient.connect(5000, (String) msg.obj, msg.arg2);
                    } catch (IOException ex) {
                        LogExt.e(TAG, "IOException", ex);
                    }
                    break;
                default:
                    break;
            }
        }
    }

    Listener mRemoteClientListener = new Listener() {

        @Override
        public void connected(Connection connection) {
            mMainHandler.sendEmptyMessage(Configuration.MSG_UI_REMOTE_SERVER_CONNECTED);
            RegisterName registerName = new RegisterName();
            registerName.name = Configuration.TYPE_PHONE_CLIENT + "-" + mLocalIp + "-" + mUUID;
            mRemoteClient.sendTCP(registerName);
            LogExt.e(TAG, "connect remote server ok!");
        }

        @Override
        public void disconnected(Connection connection) {
            mRemoteClient.stop();
            mMainHandler.obtainMessage(Configuration.MSG_DISCONNECT_REMOTE_SERVER).sendToTarget();
        }

        @Override
        public void received(Connection connection, Object object) {

            LogExt.d(TAG, "received Object " + object);
            if (!object.equals(null)) {
                mNetTransportListener.onRecvObject(object);
            }
            
           //mod by xuxr@tcl.com begin -->
            /*if (object instanceof UpdateNames) {
                // UpdateNames updateNames = (UpdateNames) object;
                return;
            }

            if (object instanceof ChatMessage) {
                ChatMessage chatMessage = (ChatMessage) object;
                LogExt.d(TAG, "receive text: " + chatMessage.text);
                if (null != mNetTransportListener && null != chatMessage) {
                    mNetTransportListener.onNewMsg(chatMessage);
                }
                return;
            }

            if (object instanceof Data) {
                Data data = (Data) object;
                if (null != mNetTransportListener && null != data) {
                    mNetTransportListener.onNewData(data);
                }
                LogExt.d(TAG, "receive data: " + data.getString());
            }*/
            
          //mod by xuxr@tcl.com end <--
        }

        @Override
        public void idle(Connection connection) {
            // TODO Auto-generated method stub
            super.idle(connection);
        }
    };

    public void remoteClientClose() {
        if (null != mRemoteClient) {
            mRemoteClient.stop();
        }
        mRemoteClientLooper.quit();
    }
	//add by xux@tcl.com begin -->
    public void sendTCPData(Object obj) {
        if (null != mRemoteClient) {
            mRemoteClient.sendTCP(obj);
        }
    }
    //add by xux@tcl.com end -->
}
